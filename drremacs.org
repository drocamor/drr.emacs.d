* David Rocamora's literate Emacs configuration

I got tired of having a giant .emacs file that was incomprehensible and then I got annoyed with having configuration split between a ton of different files. Having a giant org file seemed to be the solution. Let's see how it goes...

This is a dumb idea, but I'm doing it anyways!

Now, github can't seem to render the .org file correctly, so I will export it to HTML to be the readme. Then maybe it will do syntax highlighting correctly. Who knows. 

* Installing packages and features
** Debian Packages
   I wanted to use fancy package.el tricks, but this actually causes shitloads of problems. Best to stick with debian packages. So to make things cool make sure that these are installed:
   
  - magit
  - notmuch
  - puppet-el
  - slime
  - paredit-el
  - emacs-goodies-el
  - debian-el
  - css-mode
** Emacs packages that aren't in Debian
   There's always stuff that I'd like to have but I can't get in Debian. So I store them in a folder ~/.emacs.d/elisp. Hopefully I am cloning remote git repositories so I can upgrade them easily.
#+srcname: package-load-path
#+begin_src emacs-lisp 
  ;; Update the load path and load whatever is in it
  (let ((default-directory "~/.emacs.d/elisp/"))
        (normal-top-level-add-to-load-path '("."))
        (normal-top-level-add-subdirs-to-load-path))
#+end_src   

* Settings

** Keybindings
#+srcname: keybindings
#+begin_src emacs-lisp 
(define-key global-map "\C-x\C-b" 'ibuffer)
(define-key global-map "\C-cm" 'notmuch)
(define-key global-map "\C-cg" 'magit-status)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cb" 'org-iswitchb)
(define-key global-map "\C-cr" 'org-remember)
(define-key global-map "\C-cu" 'mingus)
#+end_src

** Appearance

I am sort of picky about how things look and I have yet to find an emacs theme that I am really satisfied with.

#+srcname: appearance
#+begin_src emacs-lisp 
;; A slick theme
;; (require 'color-theme-github)

;; Tool bar no, menu bar yes
(menu-bar-mode 1)

;; system font
(setq font-use-system-font 1)
#+end_src

** Behavior

These are a few things I set because I want things just so.

#+srcname: behavior
#+begin_src emacs-lisp 
  ;; Save my place in a file
  (setq-default save-place t)
  
  ;; All "yes or no" prompts are now "y or n"
  ;(defalias 'yes-or-no-p 'y-or-n-p)
  
  ;; Cua rectangles, but no new key commands
  ;; I hypothesize that this messes up my emacs, but it is too useful to get rid of
  (cua-selection-mode t)
  
  ;; Browser, and no more startup message
  (setq browse-url-generic-program "google-chrome"
        browse-url-browser-function 'browse-url-generic
        inhibit-startup-message t
        visible-bell t)
#+end_src
*** Backups

I hate all those ~s getting mixed in with my files, but I need backups. Here's my solution (stolen from [[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][here]])
#+srcname: backups
#+begin_src emacs-lisp 
  ;; Relocate backups
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
  
  ;; Safely copy them
  (setq backup-by-copying t)
  
  ;; Keep some old versions around
  
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+end_src


** Custom set variables

Based on the warning, the world will probably end because this is in an org file.

#+srcname: custom-set-variables
#+begin_src emacs-lisp 
  (custom-set-variables
    ;; custom-set-variables was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
   '(org-agenda-custom-commands (quote (("d" todo "DELEGATED" nil) ("c" todo "DONE" nil) ("h" todo "HOLD" nil) ("W" agenda "" ((org-agenda-ndays 21))) ("A" agenda "" ((org-agenda-skip-function (lambda nil (org-agenda-skip-entry-if (quote notregexp) "\\=.*\\[#A\\]"))) (org-agenda-ndays 1) (org-agenda-overriding-header "Today's Priority #A tasks: "))) ("u" alltodo "" ((org-agenda-skip-function (lambda nil (org-agenda-skip-entry-if (quote scheduled) (quote deadline) (quote regexp) "<[^>
  ]+>"))) (org-agenda-overriding-header "Unscheduled TODO entries: "))))))
   '(org-agenda-files (quote ("~/Documents/org/todo.org")))
   '(org-default-notes-file "~/Documents/org/notes.org"))
#+end_src

* Mail
This probably doesn't need it's own section, but it has one

#+srcname: mail
#+begin_src emacs-lisp

;; We need a spell checker
(add-hook 'message-mode-hook 'flyspell-mode)

;; Sign messages by default.
(add-hook 'message-setup-hook 'mml-secure-sign-pgpmime)

(require 'notmuch-address)
(setq notmuch-address-command "~/bin/addrlookup")
(notmuch-address-message-insinuate)
#+end_src

* Modes
** org-mode
I do a lot of work in org-mode. It is really the reason I use emacs.

#+srcname: org-mode-important
#+begin_src emacs-lisp
(setq org-log-done '(state)
      org-todo-keywords
      '((sequence "TODO(t)" "HOLD(h)" "|" "DONE(d)" "DELEGATED(e)"))
      org-use-fast-todo-selection t
      org-directory "~/Documents/org"
      org-default-notes-file (concat org-directory "/notes.org")
      org-log-done t)
      
(org-remember-insinuate)

(setq org-remember-templates
      '(("Todo" ?t "* TODO %?\n  %i\n  %a" "~/Documents/org/todo.org" "Tasks")
        ("Notes" ?n "* %U %?\n\n  %i\n  %a" "~/Documents/org/notes.org")
        ("Journal" ?j "* %t - %^{Title}\n  %i\n  %?" "~/Documents/org/journal.org" "Journal")))
#+end_src

*** Papers and docs
I want to be able to use org to write and documents, etc. Not sure if this will work

#+srcname: org-mode-papers
#+begin_src emacs-lisp 
;; 'djcb-org-article' for export org documents to the LaTex 'article', using
;; XeTeX and some fancy fonts; requires XeTeX (see org-latex-to-pdf-process)
(unless (boundp 'org-export-latex-classes)
  (setq org-export-latex-classes nil))

;; You must add this to the top of the org file:

;; #+LaTeX_CLASS: drr-org-article
;; #+TITLE: My little document


(add-to-list 'org-export-latex-classes
	     '("drr-org-article"
	       "\\documentclass[letterpaper]{article}
    \\usepackage[T1]{fontenc}
    \\usepackage{fontspec}
    \\usepackage{graphicx} 
    \\defaultfontfeatures{Mapping=tex-text}
    \\setmainfont{Linux Libertine O}
    \\setsansfont{League Gothic}
    \\setmonofont[Scale=0.8]{Inconsolata}
    \\usepackage{geometry}
    \\geometry{letterpaper, textwidth=6.5in, textheight=10in,
		marginparsep=7pt, marginparwidth=.6in}
    \\pagestyle{empty}
    \\title{}
	  [NO-DEFAULT-PACKAGES]
	  [NO-PACKAGES]"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(setq org-latex-to-pdf-process 
      '("xelatex -interaction nonstopmode %s"
	"xelatex -interaction nonstopmode %s")) ;; for multiple passes
#+end_src

*** Babel
#+srcname: org-babel
#+begin_src emacs-lisp 
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)
     (dot . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (python . t)
     (ruby . t)
     (screen . nil)
     (sh . t)))
  
  (setq org-src-fontify-natively t)
#+end_src

*** Stupid org tricks
#+srcname: org-mode-toys
#+begin_src emacs-lisp 
(defun org-insert-screenshot ()
  "Take a screenshot into a unique-named file in the current buffer file 
directory and insert a link to this file."
  (interactive)
  (setq filename
	(concat
	 (make-temp-name
	  (file-name-directory (buffer-file-name))) ".jpg"))
  (call-process "import" nil nil nil filename)
  (insert (concat "[[" filename "]]"))
  (org-display-inline-images))
#+end_src

** ibuffer

This is a much nicer buffer interface

#+srcname: appearance
#+begin_src emacs-lisp 
(require 'ibuffer)
(setq ibuffer-saved-filter-groups
      (quote (("default"      
	       ("Org" 
		(mode . org-mode))  
	       ("Mail"
		(or
		 (mode . notmuch-show)
		 (mode . notmuch-search)
		 (mode . notmuch-hello)))
	       ("Programming"
		(or
		 (mode . c-mode)
		 (mode . perl-mode)
		 (mode . python-mode)
		 (mode . emacs-lisp-mode)))
	       ("Puppet"
		(or 
		 (mode . puppet-mode)
		 (name . "^.*\\.erb$")))
	       ("Magit"
		(name . "^\\*magit.*"))))))
 
(add-hook 'ibuffer-mode-hook
	  (lambda ()
	    (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src

** ido
Help emacs cope with my inability to type by putting ido everywhere.

This seems to be causing stuff to mess up

#+srcname: ido
#+begin_src emacs-lisp 
;(defvar ido-enable-replace-completing-read t)
; 
;(defadvice completing-read (around use-ido-when-possible activate)
;  (if (or (not ido-enable-replace-completing-read) ; Manual override disable ido
;          (and (boundp 'ido-cur-list)
;               ido-cur-list)) ; Avoid infinite loop from ido calling this
;      ad-do-it
;    (let ((allcomp (all-completions "" collection predicate)))
;      (if allcomp
;          (setq ad-return-value
;                (ido-completing-read prompt allcomp
;                                     nil require-match initial-input hist def))
;        ad-do-it))))
#+end_src

** latex
#+srcname: latex
#+begin_src emacs-lisp
;;set xetex mode in tex/latex
(add-hook 'LaTeX-mode-hook (lambda()
			     (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
			     (setq TeX-command-default "XeLaTeX")
			     (setq TeX-save-query nil)
			     (setq TeX-show-compilation t)
			     ))

(add-hook 'LaTeX-mode-hook 'flyspell-mode)
#+end_src

** mingus
Mingus is a great music player.
#+srcname: mingus
#+begin_src emacs-lisp
  (require 'mingus)
#+end_src

** twittering-mode
Sometimes I like to tweet
#+srcname: mingus
#+begin_src emacs-lisp
  (require 'twittering-mode)
  (setq twittering-use-master-password t)
#+end_src


** tramp

I do a lot of editing of files over SSH as root. That's right. I live dangerously.

#+srcname: tramp
#+begin_src emacs-lisp
;; For tramp to edit using sudo over ssh like:
;; C-x C-f /sudo:hostname.domain:/etc/hosts
(require 'tramp)
(add-to-list 'tramp-default-proxies-alist
	     '(nil "\\`root\\'" "/ssh:%h:"))
(add-to-list 'tramp-default-proxies-alist
	     '((regexp-quote (system-name)) nil nil))
#+end_src
